Only in /home/john/local/src/meme_4.5.0/: conf-and-build-both.sh
Only in /home/john/local/src/meme_4.5.0/: config.h
Only in /home/john/local/src/meme_4.5.0/: config.log
Only in /home/john/local/src/meme_4.5.0/: config.status
Only in /home/john/local/src/meme_4.5.0/doc/examples/fimo_example_output_files: Makefile
Only in /home/john/local/src/meme_4.5.0/doc/examples/glam2_example_output_files: Makefile
Only in /home/john/local/src/meme_4.5.0/doc/examples/glam2scan_example_output_files: Makefile
Only in /home/john/local/src/meme_4.5.0/doc/examples: Makefile
Only in /home/john/local/src/meme_4.5.0/doc/examples/mast_example_output_files: Makefile
Only in /home/john/local/src/meme_4.5.0/doc/examples/mcast_example_output_files: Makefile
Only in /home/john/local/src/meme_4.5.0/doc/examples/meme_example_output_files: Makefile
Only in /home/john/local/src/meme_4.5.0/doc/examples/sample_opal_scripts: Makefile
Only in /home/john/local/src/meme_4.5.0/doc/examples/tomtom_example_output_files: Makefile
Only in /home/john/local/src/meme_4.5.0/doc/images: Makefile
Only in /home/john/local/src/meme_4.5.0/doc: Makefile
Only in /home/john/local/src/meme_4.5.0/etc: fasta_db.csv
Only in /home/john/local/src/meme_4.5.0/etc: fasta_db.index
Only in /home/john/local/src/meme_4.5.0/etc: gomo_db.csv
Only in /home/john/local/src/meme_4.5.0/etc: logo.js.xsl
Only in /home/john/local/src/meme_4.5.0/etc: Makefile
Only in /home/john/local/src/meme_4.5.0/etc: meme.css.xsl
Only in /home/john/local/src/meme_4.5.0/etc: motif_db.csv
Only in /home/john/local/src/meme_4.5.0/etc: motif_db.index
Only in /home/john/local/src/meme_4.5.0/etc: tomtom_config.xml
Only in /home/john/local/src/meme_4.5.0/: libtool
Only in /home/john/local/src/meme_4.5.0/: Makefile
Only in /home/john/local/src/meme_4.5.0/: meme_out
Only in /home/john/local/src/meme_4.5.0/scripts: ama-qvalues
Only in /home/john/local/src/meme_4.5.0/scripts: cat_max
Only in /home/john/local/src/meme_4.5.0/scripts: chen2meme
Only in /home/john/local/src/meme_4.5.0/scripts: compare_dates
Only in /home/john/local/src/meme_4.5.0/scripts: fasta-fetch
Only in /home/john/local/src/meme_4.5.0/scripts: fasta-make-index
Only in /home/john/local/src/meme_4.5.0/scripts: fasta-shuffle-letters
Only in /home/john/local/src/meme_4.5.0/scripts: fasta-subsample
Only in /home/john/local/src/meme_4.5.0/scripts: fasta-unique-names
Only in /home/john/local/src/meme_4.5.0/scripts: get_db_csv
Only in /home/john/local/src/meme_4.5.0/scripts: hart2meme-bkg
Only in /home/john/local/src/meme_4.5.0/scripts: Makefile
Only in /home/john/local/src/meme_4.5.0/scripts: meme
Only in /home/john/local/src/meme_4.5.0/scripts: meme-get-motif
Only in /home/john/local/src/meme_4.5.0/scripts: MemeWebUtils.pm
Only in /home/john/local/src/meme_4.5.0/scripts: mhmm2html
Only in /home/john/local/src/meme_4.5.0/scripts: tomtom_webservice
Only in /home/john/local/src/meme_4.5.0/scripts: uniprobe2meme
Only in /home/john/local/src/meme_4.5.0/scripts: update_db
Only in /home/john/local/src/meme_4.5.0/src: .deps
Only in meme_4.5.0/src: dir.h
diff -rup meme_4.5.0/src/display.c /home/john/local/src/meme_4.5.0/src/display.c
--- meme_4.5.0/src/display.c	2010-09-03 08:10:41.000000000 +0100
+++ /home/john/local/src/meme_4.5.0/src/display.c	2010-11-19 09:55:20.000000000 +0000
@@ -1079,43 +1079,46 @@ extern void print_zij(
   MODEL *model        /* the model */
 )
 {
-  int i, j;
-  int n_samples = dataset->n_samples;
-  SAMPLE **samples = dataset->samples;
-  FILE *out=stdout;
-
-  fprintf(out, "z_ij: lambda=%f ll=%f\n", model->lambda, model->ll);
-  for (i=0; i<n_samples; i++) {     /* sequence */
-    int lseq = samples[i]->length;
-    double *zi = samples[i]->z;		// zi[j], j in [-lseq...+lseq]
-    int w = model->w;
-    fprintf(out, ">%s\nz : ", samples[i]->sample_name);
-    for (j=0; j<lseq-w+1; j++) {    	/* position */
-      int k = j+1;			// Z_i = k
-      double z = model->invcomp ? MIN(1.0,Zi(-k)+Zi(k)) : Zi(k);
-      int zij = NINT(10 * z);  /* round z */
-      fprintf(out, "%1x", zij);
-    } // position
-    // print s0 and s1 for backwards compatibility
-    if (model->invcomp) {
-      fprintf(out, "\ns0: ");
-      for (j=0; j<lseq-w+1; j++) {    	/* position */
-	int k = j+1;			// Z_i = k
-	double z = Zi(k);
-	int zij = NINT(10 * z);  /* round z */
-	fprintf(out, "%1x", zij);
-      } // position
-      fprintf(out, "\ns1: ");
-      for (j=0; j<lseq-w+1; j++) {    	/* position */
-	int k = j+1;			// Z_i = k
-	double z = Zi(-k);
-	int zij = NINT(10 * z);  /* round z */
-	fprintf(out, "%1x", zij);
-      } // position
-    }
-    fprintf(out, "\n");
-  } /* sequence */
-  printf("\n");
+	int i, j;
+	int n_samples = dataset->n_samples;
+	SAMPLE **samples = dataset->samples;
+	FILE *out=stdout;
+
+	fprintf(out, "Z_ij: lambda=%f ll=%f\n", model->lambda, model->ll);
+	for (i=0; i<n_samples; i++) {     /* sequence */
+		int lseq = samples[i]->length;
+		double *zi = samples[i]->z;		// zi[j], j in [-lseq...+lseq]
+		int w = model->w;
+		fprintf(out, ">%s\n", samples[i]->sample_name);
+//		for (j=0; j<lseq-w+1; j++) {    	/* position */
+//			int k = j+1;			// Z_i = k
+//			double z = model->invcomp ? MIN(1.0,Zi(-k)+Zi(k)) : Zi(k);
+//			int zij = NINT(10 * z);  /* round z */
+//			//fprintf (out, "Z_ij: %5d %5d + %f\n", i, j, z);
+//			//fprintf(out, "%1x", zij);
+//		} // position
+		// print s0 and s1 for backwards compatibility
+		//fprintf(out, "\ns0: ");
+		for (j=0; j<lseq-w+1; j++) {    	/* position */
+			int k = j+1;			// Z_i = k
+			double z = Zi(k);
+			int zij = NINT(10 * z);  /* round z */
+			if( z > 1e-6 ) fprintf (out, "Z_ij: %5d %5d + %f\n", i, j, z);
+			//fprintf(out, "%1x", zij);
+		} // position
+		if (model->invcomp) {
+			//fprintf(out, "\ns1: ");
+			for (j=0; j<lseq-w+1; j++) {    	/* position */
+				int k = j+1;			// Z_i = k
+				double z = Zi(-k);
+				int zij = NINT(10 * z);  /* round z */
+				if( z > 1e-6 ) fprintf (out, "Z_ij: %5d %5d - %f\n", i, j, z);
+				//fprintf(out, "%1x", zij);
+			} // position
+		}
+		fprintf(out, "\n");
+	} /* sequence */
+	printf("\n");
 } /* print_zij */
 
 /**********************************************************************/
diff -rup meme_4.5.0/src/em.c /home/john/local/src/meme_4.5.0/src/em.c
--- meme_4.5.0/src/em.c	2010-09-03 06:14:00.000000000 +0100
+++ /home/john/local/src/meme_4.5.0/src/em.c	2010-11-22 11:21:04.000000000 +0000
@@ -24,6 +24,7 @@
 
 #include "meme.h"
 #include "psp.h"
+#include <sys/timeb.h>
  
 static BOOLEAN check_convergence(
   THETA	old_theta,			/* before EM iteration */
@@ -48,6 +49,10 @@ extern void em(
   DATASET *dataset 		/* the dataset */
 )
 {
+  /* Added by JR. */
+  struct timeb start_time, end_time;
+  ftime(&start_time);
+
   MOTYPE mtype = model->mtype;		/* type of model */
   int max_w = model->w;			/* width of motif */
   int alength = dataset->alength;	/* length of alphabet */
@@ -148,6 +153,19 @@ extern void em(
   /* save the number of iterations (counting from zero)*/
   model->iter += iter;
 
+  ftime(&end_time);
+  if( PRINT_STARTS ) {
+	double duration = end_time.time - start_time.time + (end_time.millitm - start_time.millitm) / 1000.;
+    /* get the consensus of the model */
+    THETA theta = model->theta;
+    int w = model->w;
+    char *cons;
+    cons = get_consensus(theta, w, dataset, 1, MINCONS);
+	printf("EM (without discretization) took %f seconds for %d iterations. Final consensus: %s\n", duration, model->iter, cons);
+    fflush(stdout);
+    myfree(cons);
+  }
+
   /* discretize, 1 m_step, get relative entropy  */
   (void) discretize(model, dataset);		
   /* use b=0 if using MegaP heuristic */
@@ -166,6 +184,14 @@ extern void em(
   }
 
   free_2array(theta_save, max_w);
+
+  /* Added by JR. */
+  ftime(&end_time);
+  if( PRINT_STARTS ) {
+	double duration = end_time.time - start_time.time + (end_time.millitm - start_time.millitm) / 1000.;
+	printf("EM took %f seconds for %d iterations\n", duration, model->iter);
+    fflush(stdout);
+  }
 } /* em */
 
 /**********************************************************************/
Only in /home/john/local/src/meme_4.5.0/src/filters/dust: .deps
Only in /home/john/local/src/meme_4.5.0/src/filters/dust: Makefile
Only in /home/john/local/src/meme_4.5.0/src/filters: Makefile
Only in /home/john/local/src/meme_4.5.0/src/filters/purge: .deps
Only in /home/john/local/src/meme_4.5.0/src/filters/purge: Makefile
diff -rup meme_4.5.0/src/init.c /home/john/local/src/meme_4.5.0/src/init.c
--- meme_4.5.0/src/init.c	2010-09-03 06:14:15.000000000 +0100
+++ /home/john/local/src/meme_4.5.0/src/init.c	2010-11-09 14:23:18.000000000 +0000
@@ -28,7 +28,7 @@
 #include "psp.h"
 
 #ifndef EXP
-#define EXP 0
+#define EXP 1
 #else
 #define EXP 1
 #endif
Only in /home/john/local/src/meme_4.5.0/src/libxml2: .deps
Only in /home/john/local/src/meme_4.5.0/src/libxml2/include/libxml: Makefile
Only in /home/john/local/src/meme_4.5.0/src/libxml2/include: Makefile
Only in /home/john/local/src/meme_4.5.0/src/libxml2: Makefile
Only in /home/john/local/src/meme_4.5.0/src/libxslt: .deps
Only in /home/john/local/src/meme_4.5.0/src/libxslt: Makefile
Only in /home/john/local/src/meme_4.5.0/src: Makefile
diff -rup meme_4.5.0/src/meme.c /home/john/local/src/meme_4.5.0/src/meme.c
--- meme_4.5.0/src/meme.c	2010-09-03 08:10:41.000000000 +0100
+++ /home/john/local/src/meme_4.5.0/src/meme.c	2010-11-09 14:23:32.000000000 +0000
@@ -629,7 +629,7 @@ static BOOLEAN init_model(
 
 //FIXME:
 //  printf("start_point: score %f cons %s\n", s_point->score, s_point->cons0);
-  if (PRINTALL) {
+  if (PRINT_STARTS) {
     printf("component %2d: lambda= %8.6f ps= %8.0f\n",
       1, model->lambda, wps(dataset, w0));
     print_theta(0, 2, model->nsites_dis, model->theta, model->w, 0, "",
Only in /home/john/local/src/meme_4.5.0/src/parallel: .deps
Only in /home/john/local/src/meme_4.5.0/src/parallel: Makefile
diff -rup meme_4.5.0/src/tcm.c /home/john/local/src/meme_4.5.0/src/tcm.c
--- meme_4.5.0/src/tcm.c	2010-09-03 06:11:50.000000000 +0100
+++ /home/john/local/src/meme_4.5.0/src/tcm.c	2010-11-20 12:39:45.000000000 +0000
@@ -49,110 +49,110 @@ double tcm_e_step(
   DATASET *dataset  		/* the dataset */
 )
 {
-  int i, j, k, ii;
-  THETA logtheta1 = model->logtheta;	/* motif log(theta) */
-  THETA logtheta1_rc = model->logtheta_rc;// motif log(theta) reverse complement
-  int w = model->w;			/* motif width */
-  int n_samples = dataset->n_samples;	/* number of sequences */
-  BOOLEAN invcomp = model->invcomp;     /* use reverse complement strand, too */
-  double log_sigma = invcomp ? log(0.5) : 0;	/* log \sigma */
-  double lambda = model->lambda;	/* \lambda of tcm model */
-  double log_lambda = LOG(lambda);	/* log \lambda */
-  double log_1mlambda = LOG(1-lambda);	/* log (1 - \lambda) */
-  double log_pX;			/* log likelihood; no erase or smooth */
-  double log_Pij = 0;			// position-specific prior
-
-  log_Pij = log_sigma;
-
-  /* E step */
-
-  convert_theta_to_log(model, dataset);
-
-  /* calculate all the posterior offset probabilities */
-  log_pX = 0;
-
-  for (i=0; i < n_samples; i++) {	/* sequence */
-    SAMPLE *s = dataset->samples[i];
-    int lseq = s->length;
-    double *zi = s->z;			/* Pr(z_ij=1 | X_i, \theta) */
-    double *not_o = s->not_o;		/* Pr(V_ij = 1) */
-    double *lcb = s->logcumback;	/* cumulative background probability */
-    double log_pXij;			// log Pr(X_ij | \phi)
-    double log_pXi = 0;			// log Pr(X_i | \phi)
-
-    if (lseq < w) continue;		/* sequence too short for motif */
-
-    int m = lseq - w + 1;		/* number of possible sites */
-    for (k=0; k<m; k++) {		// position in sequence
-      int j = k + 1;			// Z_ij = 1
-
-      // log ( Pr(X_ij | Z_ij=1, \theta0) \sigma (1-\lambda) )
-      double log_pXijtheta0 = log_sigma + log_1mlambda;
-
-      // log ( Pr(X_ij | Z_ij=1, \theta1) \lambda P_ij )
-      double log_pXijtheta1 = log_lambda + log_Pij;
-      double log_pXijtheta1n = 0;
-      // FIXME: this will change if P_i,j != P_i,-j
-      if (invcomp) log_pXijtheta1n = log_pXijtheta1;
-
-      /* calculate the probability of positions in the site under the
-	background and foreground models
-      */
-      // background: both strands
-      log_pXijtheta0 += Log_back(lcb, k, w);	// Pr(site | \theta_0
-
-      //
-      // Z_ij = log Pr(X_ij | Z_ij=1, \theta_1) \sigma \lambda
-      //
-      char *res = s->res+k;
-      if (invcomp) {
-	for (ii=0; ii<w; ii++) {
-          // foreground: positive strand
-          log_pXijtheta1 += logtheta1(ii, (int)res[ii]);
-          // foreground: negative strand
-          log_pXijtheta1n += logtheta1_rc(ii, (int)res[ii]);
-        }
-	Zi(j) = log_pXijtheta1;
-        Zi(-j) = log_pXijtheta1n;
-      } else {
-        // foreground: positive strand
-	for (ii=0; ii<w; ii++) log_pXijtheta1 += logtheta1(ii, (int)res[ii]);
-	Zi(j) = log_pXijtheta1;
-      }
-
-      // log_pXij = log Pr(X_i | Z_ij=1, \phi) \sigma \lambda
-      log_pXij = LOGL_SUM(log_pXijtheta0, log_pXijtheta1);
-      if (invcomp) { 
-        double log_pXijn = LOGL_SUM(log_pXijtheta0, log_pXijtheta1n);
-        log_pXij = LOGL_SUM(log_pXij, log_pXijn); 
-      }
-
-      /* Z_ij : normalize, delog and account for erasing
-	Pr(Z_ij=1 | X_i, \phi) \approx
-	     P(Z_ij=1, | X_i, \phi) P(V_ij = 1)
-      */
-      Zi(j) = MIN(1.0, exp(Zi(j) - log_pXij) * not_o[k]);	/* roundoff */
-      if (invcomp) Zi(-j) = MIN(1.0, exp(Zi(-j) - log_pXij) * not_o[k]);
-
-      // log_pXi = log Pr(X_i | \phi) \sigma \lamba)
-      log_pXi = (k==0) ? log_pXij : LOGL_SUM(log_pXi, log_pXij);
-
-      // log_pX = log Pr(X | \phi) = sum_i,j log(Pr(X_ij)) */
-      log_pX += log_pXi;
-    } // Z_ij = 1
-
-    // set tail of sequence Zi to 0
-    for (j=m+1; j<=lseq; j++) {      // Z_ij = 1
-      Zi(j) = 0;			// tail of sequence
-      if (invcomp) Zi(-j) = 0;
-    } // Z_ij = 1
+	int i, j, k, ii;
+	THETA logtheta1 = model->logtheta;	/* motif log(theta) */
+	THETA logtheta1_rc = model->logtheta_rc;// motif log(theta) reverse complement
+	int w = model->w;			/* motif width */
+	int n_samples = dataset->n_samples;	/* number of sequences */
+	BOOLEAN invcomp = model->invcomp;     /* use reverse complement strand, too */
+	double log_sigma = invcomp ? log(0.5) : 0;	/* log \sigma */
+	double lambda = model->lambda;	/* \lambda of tcm model */
+	double log_lambda = LOG(lambda);	/* log \lambda */
+	double log_1mlambda = LOG(1-lambda);	/* log (1 - \lambda) */
+	double log_pX;			/* log likelihood; no erase or smooth */
+	double log_Pij = 0;			// position-specific prior
+
+	log_Pij = log_sigma;
+
+	/* E step */
+
+	convert_theta_to_log(model, dataset);
+
+	/* calculate all the posterior offset probabilities */
+	log_pX = 0;
+
+	for (i=0; i < n_samples; i++) {	/* sequence */
+		SAMPLE *s = dataset->samples[i];
+		int lseq = s->length;
+		double *zi = s->z;			/* Pr(z_ij=1 | X_i, \theta) */
+		double *not_o = s->not_o;		/* Pr(V_ij = 1) */
+		double *lcb = s->logcumback;	/* cumulative background probability */
+		double log_pXij;			// log Pr(X_ij | \phi)
+		double log_pXi = 0;			// log Pr(X_i | \phi)
+
+		if (lseq < w) continue;		/* sequence too short for motif */
+
+		int m = lseq - w + 1;		/* number of possible sites */
+		for (k=0; k<m; k++) {		// position in sequence
+			int j = k + 1;			// Z_ij = 1
+
+			// log ( Pr(X_ij | Z_ij=1, \theta0) \sigma (1-\lambda) )
+			double log_pXijtheta0 = log_sigma + log_1mlambda;
+
+			// log ( Pr(X_ij | Z_ij=1, \theta1) \lambda P_ij )
+			double log_pXijtheta1 = log_lambda + log_Pij;
+			double log_pXijtheta1n = 0;
+			// FIXME: this will change if P_i,j != P_i,-j
+			if (invcomp) log_pXijtheta1n = log_pXijtheta1;
+
+			/* calculate the probability of positions in the site under the
+               background and foreground models
+			 */
+			// background: both strands
+			log_pXijtheta0 += Log_back(lcb, k, w);	// Pr(site | \theta_0
+
+			//
+			// Z_ij = log Pr(X_ij | Z_ij=1, \theta_1) \sigma \lambda
+			//
+			char *res = s->res+k;
+			if (invcomp) {
+				for (ii=0; ii<w; ii++) {
+					// foreground: positive strand
+					log_pXijtheta1 += logtheta1(ii, (int)res[ii]);
+					// foreground: negative strand
+					log_pXijtheta1n += logtheta1_rc(ii, (int)res[ii]);
+				}
+				Zi(j) = log_pXijtheta1;
+				Zi(-j) = log_pXijtheta1n;
+			} else {
+				// foreground: positive strand
+				for (ii=0; ii<w; ii++) log_pXijtheta1 += logtheta1(ii, (int)res[ii]);
+				Zi(j) = log_pXijtheta1;
+			}
+
+			// log_pXij = log Pr(X_i | Z_ij=1, \phi) \sigma \lambda
+			log_pXij = LOGL_SUM(log_pXijtheta0, log_pXijtheta1);
+			if (invcomp) {
+				double log_pXijn = LOGL_SUM(log_pXijtheta0, log_pXijtheta1n);
+				log_pXij = LOGL_SUM(log_pXij, log_pXijn);
+			}
+
+			/* Z_ij : normalize, delog and account for erasing
+	           Pr(Z_ij=1 | X_i, \phi) \approx
+	           P(Z_ij=1, | X_i, \phi) P(V_ij = 1)
+			 */
+			Zi(j) = MIN(1.0, exp(Zi(j) - log_pXij) * not_o[k]);	/* roundoff */
+			if (invcomp) Zi(-j) = MIN(1.0, exp(Zi(-j) - log_pXij) * not_o[k]);
+
+			// log_pXi = log Pr(X_i | \phi) \sigma \lamba)
+			log_pXi = (k==0) ? log_pXij : LOGL_SUM(log_pXi, log_pXij);
+
+			// log_pX = log Pr(X | \phi) = sum_i,j log(Pr(X_ij)) */
+			log_pX += log_pXi;
+		} // Z_ij = 1
+
+		// set tail of sequence Zi to 0
+		for (j=m+1; j<=lseq; j++) {      // Z_ij = 1
+			Zi(j) = 0;			// tail of sequence
+			if (invcomp) Zi(-j) = 0;
+		} // Z_ij = 1
 
-  } /* sequence */
+	} /* sequence */
 
-  /* smooth so no window of size w has z_i which sum to greater than 1.0 */
-  (void) smooth(w, model, dataset);
+	/* smooth so no window of size w has z_i which sum to greater than 1.0 */
+	(void) smooth(w, model, dataset);
 
-  return (log_pX/log(2.0));
+	return (log_pX/log(2.0));
 } /* tcm_e_step */
 
 /***********************************************************************/
@@ -171,59 +171,59 @@ static double smooth(
   DATASET *dataset			/* the dataset */
 )
 {
-  int i, j, p;
-  int n_samples = dataset->n_samples;
-  SAMPLE **samples = dataset->samples;
-  double p_sum = 0.0;
-  BOOLEAN invcomp = model->invcomp;     /* use reverse complement strand, too */
-
-  for (i=0; i<n_samples; i++) {		/* sequence */
-    int ioff;
-    SAMPLE *sample = samples[i];	/* sample i */
-    int lseq = sample->length;
-    double *zi= sample->z;		/* z */
-    int max_o = lseq - w + 1;		/* largest possible offset */
-
-    if (lseq < w) continue;		/* sequence too short for motif */
-
-    /* normalize adjacent windows of length w, then shift and repeat */
-    for (ioff = 0; ioff < MIN(w, max_o); ioff+=2) {	/* window start */
-      for (j=ioff; j<max_o; j += w) {		/* adjacent windows */
-	double local_z = 0.0;
-        double max_z = 0;			/* find largest z_ij */
-        int max_p = 0;
-        int last_p = MIN(j+w, max_o);
-	for (p=j; p<last_p; p++) {		/* position */
-          int pp = p + 1;			// pp in [1,...,m]
-          double z = (invcomp ? MIN(1.0, Zi(-pp)+Zi(pp)) : Zi(pp));
-	  local_z += z;				/* compute local motif z sum */
-	  if (z > max_z) {		
-	    max_z = z;				/* largest z in window */
-	    max_p = p;				/* position with largest z */
-	  }
-	}
-	/* normalize if necessary; leave largest z in window unchanged */
-	if (local_z > 1.0) {			/* normalize */
-	  double scale = (1 - max_z) / (local_z - max_z);
-	  for (p=j; p<last_p; p++) {		/* position */
-	    if (p != max_p) {
-              int pp = p + 1;			// pp in [1,...,m]
-              Zi(pp) *= scale;			/* normalize z */
-	      if (invcomp) Zi(-pp) *= scale;/* normalize z on neg. strand */
-	    }
-	  } /* position */
-	} /* normalize */
-      } /* adjacent windows */
-    } /* window start */
-
-    /* calculate p_sum */
-    for (j=0; j < max_o; j++) {
-      int pp = p + 1;				// pp in [1,...,m]
-      p_sum += Zi(pp);
-      if (invcomp) p_sum += Zi(-pp);
-    }
+	int i, j, p;
+	int n_samples = dataset->n_samples;
+	SAMPLE **samples = dataset->samples;
+	double p_sum = 0.0;
+	BOOLEAN invcomp = model->invcomp;     /* use reverse complement strand, too */
+
+	for (i=0; i<n_samples; i++) {		/* sequence */
+		int ioff;
+		SAMPLE *sample = samples[i];	/* sample i */
+		int lseq = sample->length;
+		double *zi= sample->z;		/* z */
+		int max_o = lseq - w + 1;		/* largest possible offset */
+
+		if (lseq < w) continue;		/* sequence too short for motif */
+
+		/* normalize adjacent windows of length w, then shift and repeat */
+		for (ioff = 0; ioff < MIN(w, max_o); ioff+=2) {	/* window start */
+			for (j=ioff; j<max_o; j += w) {		/* adjacent windows */
+				double local_z = 0.0;
+				double max_z = 0;			/* find largest z_ij */
+				int max_p = 0;
+				int last_p = MIN(j+w, max_o);
+				for (p=j; p<last_p; p++) {		/* position */
+					int pp = p + 1;			// pp in [1,...,m]
+					double z = (invcomp ? MIN(1.0, Zi(-pp)+Zi(pp)) : Zi(pp));
+					local_z += z;				/* compute local motif z sum */
+					if (z > max_z) {
+						max_z = z;				/* largest z in window */
+						max_p = p;				/* position with largest z */
+					}
+				}
+				/* normalize if necessary; leave largest z in window unchanged */
+				if (local_z > 1.0) {			/* normalize */
+					double scale = (1 - max_z) / (local_z - max_z);
+					for (p=j; p<last_p; p++) {		/* position */
+						if (p != max_p) {
+							int pp = p + 1;			// pp in [1,...,m]
+							Zi(pp) *= scale;			/* normalize z */
+							if (invcomp) Zi(-pp) *= scale;/* normalize z on neg. strand */
+						}
+					} /* position */
+				} /* normalize */
+			} /* adjacent windows */
+		} /* window start */
+
+		/* calculate p_sum */
+		for (j=0; j < max_o; j++) {
+			int pp = p + 1;				// pp in [1,...,m]
+			p_sum += Zi(pp);
+			if (invcomp) p_sum += Zi(-pp);
+		}
 
-  } /* n_samples loop */
+	} /* n_samples loop */
 
-  return p_sum;
+	return p_sum;
 } /* smooth */
Only in /home/john/local/src/meme_4.5.0/: stamp-h1
Only in /home/john/local/src/meme_4.5.0/tests/clustalw2fasta: Makefile
Only in /home/john/local/src/meme_4.5.0/tests/common: Makefile
Only in /home/john/local/src/meme_4.5.0/tests/draw-mhmm: Makefile
Only in /home/john/local/src/meme_4.5.0/tests/gomo: Makefile
Only in /home/john/local/src/meme_4.5.0/tests: Makefile
Only in /home/john/local/src/meme_4.5.0/tests/mast: Makefile
Only in /home/john/local/src/meme_4.5.0/tests/mcast: Makefile
Only in /home/john/local/src/meme_4.5.0/tests/meme: Makefile
Only in /home/john/local/src/meme_4.5.0/tests/mhmm: Makefile
Only in /home/john/local/src/meme_4.5.0/tests/mhmms: Makefile
Only in /home/john/local/src/meme_4.5.0/tests/motiph: Makefile
Only in /home/john/local/src/meme_4.5.0/tests/psp-gen: Makefile
Only in /home/john/local/src/meme_4.5.0/tests/qvalue: Makefile
Only in /home/john/local/src/meme_4.5.0/tests/scaffold: Makefile
Only in /home/john/local/src/meme_4.5.0/tests/tomtom: Makefile
Only in /home/john/local/src/meme_4.5.0/tests/web: Makefile
Only in /home/john/local/src/meme_4.5.0/website/cgi-bin: Makefile
Only in meme_4.5.0/website/html: cisml.pattern.html.xsl
Only in /home/john/local/src/meme_4.5.0/website/html: Makefile
Only in meme_4.5.0/website/html: metameme-help-format.html
Only in meme_4.5.0/website/html: metameme-intro.html
Only in /home/john/local/src/meme_4.5.0/website/images: Makefile
Only in /home/john/local/src/meme_4.5.0/website: Makefile
Only in /home/john/local/src/meme_4.5.0/website/scripts: Makefile
