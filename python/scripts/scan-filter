#!/usr/bin/env python
#
# Copyright John Reid 2014
#

"""
Script that takes the output of a scan and filters sequences based on
presence of binding sites.
"""

import logging
logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger()

from optparse import OptionParser
import stempy
import sys
import os

from stempy.scan import load_occurrences


#
# Parse options and arguments from command line
#
sys.argv = [a.encode(sys.stdin.encoding or 'ascii') for a in sys.argv]
parser = OptionParser(usage='USAGE: %prog [options] motifs-file fasta-file')
parser.add_option(
    '-I',
    '--include-motif',
    action='append',
    help="Include this motif's sites in the output."
)
parser.add_option(
    '-X',
    '--exclude-motif',
    action='append',
    help="Exclude this motif's sites from the output (overrides includes)."
)
parser.add_option(
    '--Z-threshold',
    default=.3,
    type='float',
    help="The threshold on Z used to filter sites."
)
parser.add_option(
    '-r',
    '--results-dir',
    default='.',
    help='Directory to read scan from.'
)
parser.add_option(
    '-o',
    '--output-dir',
    default='filtered',
    help='Directory to write output files to.'
)
options, args = parser.parse_args()
stempy.ensure_dir_exists(options.output_dir)


#
# Now we know where we will write output to, start a log file
#
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
log_file_handler = logging.FileHandler(
    os.path.join(options.output_dir, 'scan-filter.log'), mode='w')
log_file_handler.setFormatter(formatter)
log_file_handler.setLevel(logging.INFO)
logger.addHandler(log_file_handler)


#
# Check we have the correct number of arguments
#
if len(args) != 0:
    raise RuntimeError(
        'USAGE: %s [options]', sys.argv[0])


#
# Load the occurrences and associated sequence lengths
#
occurrences, seq_infos, motifs = load_occurrences(options)
motif_set = set(motifs)
occs_it = iter(occurrences)


#
# Filter the included motifs
#
if options.include_motif:
    included_motifs = set(options.included_motif)
    # Check is a subset
    # check_subset(included_motifs, motif_set)
